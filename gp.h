// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef gp_h
#define gp_h
#include <FL/Fl.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Button.H>
#include <FL/fl_draw.H>
#include <fstream>
#include <string>
#include <cstdlib>
#include <ctime>
using namespace std;
// {\tableofcontents\section{Specification}
// Our project is a software to help users learn vocabulary the same
// way like using flashcards.
// \\
// The interface of the software will be a window in which contains a 
// list of options to let users choose which option they want to use.
// \\
// The list of options may include :
// \begin{alltt}
//   - Choose how to show up the vocabulary in the list (consequently
//    or randomly) 
//   - How to show up the word needed to repeat ( by word or by time).
//     If there are some options to choose the number of words or the
//     amount of time.
//   - Users can edit the list of vocabulary right away by click on 
//     the pencil image
// \end{alltt}
// \\
//  }
// {\clearpage\section{Analysis}
// \begin{itemize}
// \item Input: the lists of word and their definition are loaded into 2 files:
//       word.txt and definition.txt. The word needs to be type in the form:
//       \\ 
//              01 word1
//       \\
//              02 word2
//       \\
//       and the same form for definition.
// \\             
// \item Output: The words and their definitions loaded into the label of two 
//       boxes in Panel window. Users can click Next if they already know the
//       word, or click repeat to show up the word after a specific amount of
//       time or after a specific number of word passed (users will choose this
//       at Setting window).
// \end{itemize}
// }
// {\clearpage\section{Design}
// \begin{alltt}
//  - Create 2 windows: Setting and Panel. Setting window is like the first
//    picture and Panel is like the other ones.
// \\
//  - Create radio buttons for the choices of "Show words" and 
//    how to "Repeat unknown words". Also use Fl_Choice to put in the numbers
//    of words and the amount of time that let users be able to choose.
// \\ 
//  - Create the button with a image (pencil) to let users be able to edit the
//    list of vocabulary when they click on it. Use function 
//    \[system("editor <filename>.txt &")\]
// \\
//  - Create 2 file notepad to store a list of vocabulary and a list of
//    definition in the same order ( word.txt and definition.txt)
// \\
//  - To load the list of vocabulary and list of definition, create a function
//    void load_file(string filename) using ifstream. Use while loop to read 
//    each line and store these vocabularies into wordvector and definitions 
//    into defvector by using <vectorname>.push_back() member function.
//    Also create load_num function (using ifstream,too) to return the number
//    of vocabulary ( it will be N).
// \\
//  - Create random(int a, int b) function with return the random value by 
//    using \[ rand() \% (b - a + 1) + a \] to show random order of words in
//    the list. So, when we call this function, it will be random(0,N).
// \\
//  - Create the struct {int wstep, int tstep, int mindex} to save the state 
//    of word needed to repeat when user click on repeat button.
// \\
//  - Create the function void show_repeat() make the words needed to repeat
//    show up after N_repeatword or after N_repeattime when users click next
//    button ( N_repeatword and N_repeattime depend on what users choose at
//    Setting window).
//    At first, wstep = N_repeatword or tstep = N_repeattime. By click the 
//    next button, wstep and tstep start to countdown to 0. Use if function
//    to check whether wstep or tstep == 0 to show up the words.
//    For the word countdown, just use some logic algorithm like decrement.
//    For the time countdown, create count_time(void*) and use 
//    \[Fl:add_timeout(1, count_time)\] and \[Fl::repeat_timeout(1,count_time)\]
//     to count the time every second.
// \\
//  - Create the function next_word(int i) to show how to show up the next word
// \end{alltt}
// }
// {\clearpage\section{Implementation}}

class Draw : public Fl_Double_Window {
public:
	Draw(int x, int y, int w, int h) : Fl_Double_Window(x,y,w,h){}
  void draw();
};

class HelpDraw : public Fl_Double_Window {
public:
	HelpDraw(int x, int y, int w, int h) : Fl_Double_Window(x, y, w, h){}
  void draw();
};
int load_num(string filename);
void load_file(string filename);
void load_repeat_value();
int random(int a,int b);
void show_repeat();
void next_word(int i);
void choose_something();
void count_time(void*);
#include <FL/Fl_Double_Window.H>
extern Fl_Double_Window *error1;
#include <FL/Fl_Box.H>
#include <FL/Fl_Return_Button.H>
extern Fl_Double_Window *error2;
extern Fl_Double_Window *error3;
extern HelpDraw *info;
extern Draw *Panel;
extern Fl_Box *background;
extern Fl_Box *vocab;
#include <FL/Fl_Button.H>
extern Fl_Button *show;
extern Fl_Box *def;
extern Fl_Button *nextWord;
extern Fl_Button *repeat;
extern Fl_Button *back;
extern Fl_Double_Window *Setting;
#include <FL/Fl_Group.H>
extern Fl_Group *option1;
#include <FL/Fl_Round_Button.H>
extern Fl_Round_Button *c;
extern Fl_Round_Button *r;
extern Fl_Group *button;
extern Fl_Button *start;
extern Fl_Button *Refresh;
extern Fl_Button *help;
extern Fl_Button *Pencil;
#include <FL/Fl_Choice.H>
extern Fl_Choice *t;
extern Fl_Choice *w;
extern Fl_Round_Button *tchoice;
extern Fl_Round_Button *wchoice;
#endif
// {\clearpage\section{Test}
// This is how the program looks like:
// \includegraphics[scale=0.6]{setting.png}
// \\
// \includegraphics[scale=0.6]{panela.png}
// \\
// \includegraphics[scale=0.6]{panelb.png}
// }
